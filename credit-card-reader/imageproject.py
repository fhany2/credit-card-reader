# -*- coding: utf-8 -*-
"""imageProject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j8UAA8zPTHdTO-fcc5Ab6K8ITkPFdXtb
"""

!pip install easyocr

import cv2
from google.colab.patches import cv2_imshow
import easyocr
import re
import os
from sklearn.model_selection import train_test_split

# Function to extract text from an image using EasyOCR
def extract_text(image_path):
    resize=cv2.resize(cv2.imread(image_path),None,fx=1.2,fy=1.2)
    reader = easyocr.Reader(['en'], gpu=False)
    results = reader.readtext(image_path, detail=0)
    return " ".join(results)

# Function to parse card details from extracted text
def parse_card_details(extracted_text):

    # Convert the extracted text to uppercase for consistency
    extracted_text = extracted_text.upper()

    # Card Number pattern
    card_number_pattern = r'\b(?:\d{4}[- ]?){3}\d{4}\b'
    card_number_match = re.search(card_number_pattern, extracted_text)
    card_number = card_number_match.group(0) if card_number_match else None

    # Expiry Date pattern
    expiry_date_pattern = r'\b(0[1-9]|1[0-2])/(?:\d{2}|\d{4})\b'
    expiry_date_match = re.search(expiry_date_pattern, extracted_text)
    expiry_date = expiry_date_match.group(0) if expiry_date_match else None
    # Reverse the text
    reversed_text = " ".join(extracted_text.split()[::-1])

    # Cardholder Name pattern
    name_pattern = r'\b[A-Z][A-Z]*(?:\s[A-Z][A-Z]*|[A-Z][A-Z]*){1,2}\b'
    name_match = re.search(name_pattern, reversed_text)

    cardholder_name = "Not Detected"
    if name_match:
        # Get the name
        cardholder_name = " ".join(name_match.group(0).split()[::-1])
        cardholder_name = cardholder_name.replace(".", "").replace(",", "")

        if "VISA" in cardholder_name:
         cardholder_name = cardholder_name.replace("VISA", "").strip()
        name_match_after_removal = re.search(name_pattern, reversed_text.replace("VISA", "").strip())
        if name_match_after_removal:
            cardholder_name = " ".join(name_match_after_removal.group(0).split()[::-1])
            cardholder_name = cardholder_name.replace(".", "").replace(",", "")
    return {
        'Card Number': card_number,
        'Expiry Date': expiry_date,
        'Cardholder Name': cardholder_name
    }

# Function to process a list of images
def process_images(image_paths):
    results = []
    for image_path in image_paths:
        print(f"Processing: {image_path}")
        extracted_text = extract_text(image_path)
        card_details = parse_card_details(extracted_text)
        results.append({
            "Image":image_path,
            "Extracted Text": extracted_text,
            "Card Details": card_details
        })
    return results

# Main function
def main():
    # Directory containing the image dataset
    dataset_dir = "/content/drive/MyDrive/img"
    image_files = [
        os.path.join(dataset_dir, f) for f in os.listdir(dataset_dir)
        if f.lower().endswith(('.jpg', '.png', '.jfif'))
    ]

    # Split the dataset into 70% training and 30% testing
    train_files, test_files = train_test_split(image_files, test_size=0.3, random_state=42)
    print(f"Total Images: {len(image_files)} | Training: {len(train_files)} | Testing: {len(test_files)}")

    train_results = process_images(train_files)

    test_results = process_images(test_files)

    # Display the results
    print("\nTraining Results:")
    for result in train_results:
        print("\nImage: ", result["Image"])
        print("Extracted Text: ", result["Extracted Text"])
        print("Card Details: ")
        for key, value in result["Card Details"].items():
            print(f"  {key}: {value}")

    print("\nTesting Results:")
    for result in test_results:
        print("\nImage: ", result["Image"])
        print("Extracted Text: ", result["Extracted Text"])
        print("Card Details: ")
        for key, value in result["Card Details"].items():
            print(f"  {key}: {value}")


# Run the main function
if __name__ == "__main__":
    main()